ruleset manage_fleet {

	meta {
		provides vehicles, showChildFromVin, showChildren, childFromVin
		shares vehicles, showChildFromVin, showChildren, childFromVin
		use module io.picolabs.pico alias wrangler
	}

	global {
		nameFromVin = function(vehicle_vin) {
			"Vehicle " + vehicle_vin + " Pico"
		}
		childFromVin = function(vehicle_vin) {
			ent:vehicles{vehicle_vin}
		}
		showChildren = function() {
			wrangler:children()
		}
		showChildFromVin = function() {
			ent:vehicles{"0001"}
		}
		vehicles = function() {
			keys = ent:vehicles.keys();
			value = keys.map(function(x) {ent:vehicles.values([x])});
		}
		vehicleECIs = function() {
			keys = ent:vehicles.keys();
			value = keys.map(function(x) {ent:vehicles.values([x])[1]});
		}
		setReportId = function(id) {
			ent:fleet_report{[id]};
		}
		tripThreshold = 400;
	}

	rule clear_fleet {
		select when fleet clear
		always {
			ent:vehicles := {}
		}
	}

	rule subfleet_exists {
		select when fleet subfleet
		pre {
			fleetName = event:attr("name")
			exists = ent:subfleets >< fleetName
		}
		if exists then
			send_directive("fleet exists with name:")
				with name = fleetName
	}

	rule subfleet_needed {
		select when fleet subfleet
		pre {
			fleetName = event:attr("name")
			description = event:attr("description")
			exists = ent:subfleets >< fleetName
		}
		if not exists then
			noop()
		fired {
			raise pico event "new_child_request"
				attributes { "dname": fleetName,
										 "fleetName": fleetName,
										 "description": description,
										 "color": "#6ea8cc" }
		}		
	}

	rule car_already_exists {
		select when car new_vehicle
		pre {
			vehicle_vin = event:attr("vin")
			exists = ent:vehicles >< vehicle_vin
		}
		if exists then
			send_directive("vehicle exists")
				with vehicle_vin = vehicle_vin
	}

	rule car_needed {
		select when car new_vehicle
		pre {
			vehicle_vin = event:attr("vin")
			exists = ent:vehicles >< vehicle_vin			
		}
		if not exists then
			noop()
		fired {
			raise pico event "new_child_request"
				attributes { "dname": nameFromVin(vehicle_vin),
										 "color": "#e0873e",
										 "vehicle_vin": vehicle_vin }
		}
	}

	rule subfleet_initialized {
		select when pico child_initialized
		pre {
			the_subfleet = event:attr("new_child")
			fleetName = event:attr("rs_attrs"){"fleetName"}
			description = event:attr("rs_attrs"){"description"}
		}
		if fleetName.klog("FOUND FLEET NAME ")
		then
			event:send(
				{ "eci": the_subfleet.eci, "eid": "install-ruleset",
				  "domain": "pico", "type": "new_ruleset",
					"attrs": { "rid": "subfleet", "name": fleetName, "description": description } } )
			event:send (
				{ "eci": the_subfleet.eci, "eid": "set_subfleet",
					"domain": "fleet", "type": "subfleet_created",
					"attrs": { "name": fleetName, "description": description } } )
		fired {
			ent:subfleets := ent:subfleets.defaultsTo({});
			ent:subfleets{[fleetName]} := the_subfleet;
		}
	}

	rule pico_child_initialized {
		select when pico child_initialized
		pre {
			the_vehicle = event:attr("new_child").klog("NEW CAR: ")
			vehicle_vin = event:attr("rs_attrs"){"vehicle_vin"}
		}
		if vehicle_vin.klog("FOUND VEHICLE_VIN ")
		then
			event:send(
				{ "eci": the_vehicle.eci, "eid": "install-ruleset",
				  "domain": "pico", "type": "new_ruleset",
					"attrs": { "rid": "trip_store", "vehicle_vin": vehicle_vin } } )
			event:send (
				{ "eci": the_vehicle.eci, "eid": "install-ruleset",
				  "domain": "pico", "type": "new_ruleset",
					"attrs": { "rid": "track_trips", "vehicle_vin": vehicle_vin } } )
			event:send (
				{ "eci": the_vehicle.eci, "eid": "install-ruleset",
				  "domain": "pico", "type": "new_ruleset",
					"attrs": { "rid": "vehicle_profile", "vehicle_vin": vehicle_vin } } )
			event:send (
				{ "eci": the_vehicle.eci, "eid": "update_car_profile",
					"domain": "car", "type": "profile_updated",
					"attrs": { "vin": vehicle_vin, "longTrip": tripThreshold } } )
		fired {
			ent:vehicles := ent:vehicles.defaultsTo({});
			ent:vehicles{[vehicle_vin]} := the_vehicle;
		}
	}

	rule remove_vehicle {
		select when car unneeded_vehicle
		pre {
			vehicle_vin = event:attr("vin")
			exists = ent:vehicles >< vehicle_vin
			child_to_delete = childFromVin(vehicle_vin)
		}
		if exists then
			send_directive("vehicle removed")
				with vehicle_vin = vehicle_vin
						 child_to_delete = child_to_delete
		fired {
			raise pico event "delete_child_request"
				attributes child_to_delete;
			ent:vehicles{[vehicle_vin]} := null
		}
	}

	rule new_fleet_report {
		select when fleet report
		foreach vehicleECIs() setting (e)
		pre {
			correlation_id = ent:correlation_num.defaultsTo(1000) + "test".klog("CORRELATION ID: ")
			this = meta:eci.klog("THIS IS: ")
		}
		if e.klog("****ECI IN FOREACH IS: ") then
				event:send(
					{ "eci": e, "eid": "new report",
					  "domain": "vehicle", "type": "get_trips",
						"attrs": { "originator": this, "correlation_id": correlation_id } } )
		
		fired {
			ent:fleet_report := ent:fleet_report.defaultsTo({});
			ent:reports_received := 0;
		}
	}

	rule report_received {
		select when fleet receive_report
		pre {
			correlation_id = event:attr("correlation_id").klog("REPORT RECEIVED ID IS: ")
			vehicle_report = event:attr("vehicle_report").klog("VEHICLE REPORT IS: ")
			reports_received = ent:reports_received.defaultsTo(0) + 1.klog("NUM REPORTS RECEIVED: ")
		}
		fired {
			ent:trips{[passed_id, "trip", "mileage"]} := passed_mileage;
			ent:fleet_report{[correlation_id, "vehicles"]} := vehicleECIs().length();
			ent:fleet_report{[correlation_id, "responding"]} := reports_received;
			ent:fleet_report{[correlation_id, "trips"]} := vehicle_report;
			ent:reports_received := reports_received
			ent:correlation_num := ent:correlation_num.defaultsTo(1000) + 1;
		}
	}

	rule introduce_vehicle {
		select when fleet introduce 
		pre {
			fleetName = event:attr("name")
			fleeteid = ent:subfleets{[fleetName, "eci"]}.klog("FLEET EID: ")
			vin = event:attr("vin")
			vehicleeid = ent:vehicles{[vin, "eci"]}.klog("VEHICLE EID: ")
			existsFleet = ent:subfleets >< fleetName
			existsVehicle = ent:vehicles >< vin
		}
		if fleeteid && vehicleeid then 
			event:send (
 	     { "eci": fleeteid, "eid": "subscription",
  	     "domain": "wrangler", "type": "subscription",
         "attrs": { "name": nameFromVin(vin),
                    "name_space": "subfleet",
                    "my_role": "controller",
                    "subscriber_role": "vehicle",
                    "channel_type": "subscription",
                    "subscriber_eci": vehicleeid } } )
		

	}
	
}
















