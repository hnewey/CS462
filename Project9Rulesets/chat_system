ruleset chat_system {
	meta {
		provides messages
		shares messages
		use module io.picolabs.pico alias wrangler
	}

	global {
		get_eci = function(user_name) {
			ent:users{[user_name, "eci"]}
		}
		messages = function() {
			ent:user_messages
		}
		getUsers = function() {
			ent:users
		}
	}

	rule user_exists {
		select when chat user
		pre {
			user_name = event:attr("name")
			message_text = event:attr("message")
			exists = ent:users >< user_name
			user_eci = get_eci(user_name).klog("****USER ECI IS: ")
		}
		if exists then {
			event:send(
				{ "eci": user_eci, "eid": "new message",
				  "domain": "user", "type": "new_message",
					"attrs": { "user_name": user_name, "message_text": message_text } } )
		}
	}

	rule user_needed {
		select when chat user
		pre {
			user_name = event:attr("name")
			message_text = event:attr("message")
			exists = ent:users >< user_name
		}
		if not exists then
			noop()
		fired {
			raise pico event "new_child_request"
				attributes { "dname": user_name,
										 "color": "#e0873e",
										 "user_name": user_name,
										 "message_text": message_text }
		}
	}

	rule get_messages {
		select when chat messages
		foreach getUsers() setting (user)
		pre {
			user = user.klog("***USER IN LOOP IS: ")
			user_eci = user{"eci"}.klog("***USER ECI IS: ")
		}
		if user_eci then {
			event:send(
				{ "eci": user_eci, "eid": "get messages",
				  "domain": "user", "type": "messages",
					"attrs": { "originator_eci": meta:eci } } )
		}
	}

	rule user_messages {
		select when chat user_messages
		pre {
			user_messages = "{" + event:attr("user_name") + ":" + event:attr("messages") + "}"
		}
		send_directive("user messages")
			with user_messages = user_messages
		always {
			ent:user_messages := user_messages
		}
	}

	rule pico_child_initialized {
		select when pico child_initialized
		pre {
			the_user = event:attr("new_child").klog("NEW USER: ")
			user_name = event:attr("rs_attrs"){"user_name"}
			message_text = event:attr("rs_attrs"){"message_text"}
		}
		if user_name.klog("FOUND USER ")
		then every {
			event:send(
				{ "eci": the_user.eci, "eid": "install-ruleset",
				  "domain": "pico", "type": "new_ruleset",
					"attrs": { "rid": "user", "user_name": user_name, "message_text": message_text } } )
			event:send(
				{ "eci": the_user.eci, "eid": "install-ruleset",
				  "domain": "pico", "type": "new_ruleset",
					"attrs": { "rid": "Subscriptions" } } )
			event:send (
				{ "eci": the_user.eci, "eid": "new_user",
					"domain": "user", "type": "new_user",
					"attrs": { "user_name": user_name, "message_text": message_text } } )
		}
		fired {
			ent:users := ent:users.defaultsTo({});
			ent:users{[user_name]} := the_user;
		}
	}

}
