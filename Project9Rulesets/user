ruleset user {
	meta {
		use module Subscriptions
	}

	global {
		getMessages = function() {
			ent:messages
		}
	}


	rule new_user {
		select when user new_user
		pre {
			user_name = event:attr("user_name")
			message_text = event:attr("message_text")
		}
		if user_name then
			send_directive("user added")
				with user_name = user_name
		fired {
			ent:user_name := user_name.defaultsTo("New User");
			ent:message := message_text.defaultsTo("This is the text of the message");
			raise user event "new_message"
				attributes { "user_name": user_name,
										 "message_text": message_text };
			raise user event "startup";
		}
	}

	rule startup_user {
		select when user startup
		pre {
			
		}
		always {
			raise user event "new_message"
			//schedule user event "heartbeat" repeat "*/10 * * * * *"
		}
	}

	rule remove_scheduled_events {
		select when user remove_all_events
		foreach schedule:list() setting (event)
		pre {
			eventID = event{"id"}
		}
		always {
			schedule:remove(eventID)
		}
	}

	rule user_scheduled_events {
		select when user scheduled_events
		pre {
			events = schedule:list()
		}
		send_directive("scheduled events:")
			with events = events
	}

	rule user_heartbeat {
		select when user heartbeat
		pre {
			user_name = ent:user_name.klog("***HEARTBEAT USER: ")
			message = ent:message.klog("***HEARBEAT MESSAGE: ")
		}
		send_directive("heartbeat fired")
			with user_name = user_name
	}

	rule new_messsage {
		select when user new_message
		pre {
			random_num = random:integer(1,2).klog("****RANDOM IS: ")
			new_message = event:attr("message_text").defaultsTo("Test message")
			originID = meta:picoId.klog("****Origin ID is: ")
			sequence = ent:sequence.defaultsTo(0) + 1
			messageID = originID + ":" + sequence
		}
		always {
			ent:sequence := sequence;
			ent:messages := ent:messages.defaultsTo({});
			ent:messages{[messageID]} := new_message;
		}
	}

	rule get_messages {
		select when user messages
		pre {
			originator_eci = event:attr("originator_eci").klog("***IN USER ORIGINATOR IS: ")
			messages = getMessages().klog("***MESSAGES IS: ")
		}
		if messages then {
			event:send(
				{ "eci": originator_eci, "eid": "user messages",
				  "domain": "chat", "type": "user_messages",
					"attrs": { "messages": messages, "user_name": ent:user_name } } )
		}
	}

  rule auto_accept {
    select when wrangler inbound_pending_subscription_added
    pre {
      attributes = event:attrs().klog("subcription:")
    }
    always {
      raise wrangler event "pending_subscription_approval"
        attributes attributes
    }
  }

}
